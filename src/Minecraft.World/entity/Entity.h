#pragma once

#include <memory>
#include <set>
#include <string>
#include "Minecraft.World/entity/CommandSender.h"
#include "Minecraft.World/InteractionHand.h"

#include "types.h"

class MoverType;
class Block;
class BlockPos;
class BlockState;
class SoundEvent;
class Material;
class Level;
class DamageSource;
class Player;
class Item;
class CompoundTag;
class ItemInstance;
class Direction;
class LightningBolt;
class Team;
class EntityTooltipDataHolder;
class EquipmentSlot;
class AABB;
class Rotation;
class LivingEntity;
class Explosion;
class ServerPlayer;
class Mirror;
class EntityDataAccessor_Base;
class eINSTANCEOF;
class Vec3;

class Entity : public std::enable_shared_from_this<Entity>, public CommandSender {
public:
    virtual ~Entity();
    virtual void GetType() = 0;
    virtual void fjDerivedCtorCalls();
    virtual void kill();
    virtual void defineSynchedData() = 0;
    virtual void resetPos();
    virtual void remove();
    virtual void setDropContainerContent(bool);
    virtual void setSize(float, float);
    virtual void setPos(double, double, double);
    virtual void tick();
    virtual void baseTick();
    virtual void processDimensionDelay();
    virtual void getPortalWaitTime();
    virtual void setSecondsOnFire(int);
    virtual void clearFire();
    virtual void outOfWorld();
    virtual void move(MoverType, double, double, double, bool);
    virtual void updateDeltaAfterMove(Block*, double, double, double, double&, double&, double&);
    virtual void setLocationFromBoundingbox();
    virtual void getSwimSound();
    virtual void getSwimSplashSound();
    virtual void checkInsideBlocks();
    virtual void onInsideBlock(BlockState const*);
    virtual void playStepSound(BlockPos const&, Block*);
    virtual void playFlySound(float);
    virtual void makeFlySound();
    virtual void playSound(SoundEvent const*, float, float);
    virtual void isSilent();
    virtual void setSilent(bool);
    virtual void isNoGravity();
    virtual void setNoGravity(bool);
    virtual void makeStepSound();
    virtual void checkFallDamage(double, bool, Block*, BlockPos const&);
    virtual void getCollideBox();
    virtual void burn(int);
    virtual void causeFallDamage(float, float);
    virtual void isInWater();
    virtual void isOverWater();
    virtual void updateInWaterState();
    virtual void doWaterSplashEffect();
    virtual void updateSprintingState();
    virtual void doSprintParticleEffect();
    virtual void isUnderLiquid(Material*);
    virtual void getLightColor();
    virtual void getBrightness();
    virtual void setLevel(Level*);
    virtual void moveTo(double, double, double, float, float);
    virtual void playerTouch(std::shared_ptr<Player>);
    virtual void push(std::shared_ptr<Entity>);
    virtual void push(double, double, double);
    virtual void markHurt();
    virtual void hurt(DamageSource*, float);
    virtual Vec3* getViewVector(float);
    virtual void isPickable();
    virtual void isPushable();
    virtual void awardKillScore(std::shared_ptr<Entity>, int, DamageSource*);
    virtual void shouldRender(double, double, double);
    virtual void shouldRender(double);
    virtual void shouldRenderAtSqrDistance(double);
    virtual void save(CompoundTag*);
    virtual void load(CompoundTag*);
    virtual void repositionEntityAfterLoad();
    virtual void readAdditionalSaveData(CompoundTag *) = 0;
    virtual void addAdditonalSaveData(CompoundTag *) = 0;
    virtual void readAdditionContructionTag_4(CompoundTag*);
    virtual void getAdditionContructionTag();
    virtual void spawnAtLocation(Item*, int);
    virtual void spawnAtLocation(Item*, int, float);
    virtual void spawnAtLocation(not_null_ptr<ItemInstance>, float);
    virtual void isAlive();
    virtual void isInWall();
    virtual void interact(std::shared_ptr<Player> const&, InteractionHand::EInteractionHand);
    virtual void getCollideAgainstBox(std::shared_ptr<Entity>);
    virtual void rideTick();
    virtual void positionRider(std::shared_ptr<Entity> const&);
    virtual void onPassengerTurned(std::shared_ptr<Entity>);
    virtual void getRidingHeight();
    virtual void getRideHeight();
    virtual void startRiding(std::shared_ptr<Entity>);
    virtual void startRiding(std::shared_ptr<Entity>, bool);
    virtual void GetInteractTooltip(EntityTooltipDataHolder const&);
    virtual void GetHitTooltip(EntityTooltipDataHolder const&);
    virtual void HideUseTooltips();
    virtual void canRide(std::shared_ptr<Entity>);
    virtual void ejectPassengers();
    virtual void stopRiding();
    virtual void stopRidingBeforeTeleport();
    virtual void addPassenger(std::shared_ptr<Entity>);
    virtual void removePassenger(std::shared_ptr<Entity>);
    virtual void canAddPassenger(std::shared_ptr<Entity>);
    virtual void lerpTo(double, double, double, float, float, int, bool);
    virtual void getPickRadius();
    virtual void getLookAngle();
    virtual void getRotationVector();
    virtual void getForward();
    virtual void handleInsidePortal(BlockPos const&);
    virtual void getDimensionChangingDelay();
    virtual void lerpMotion(double, double, double);
    virtual void handleEntityEvent(unsigned char, int);
    virtual void animateHurt();
    virtual void getHandSlots();
    virtual void getArmorSlots();
    virtual void getAllSlots();
    virtual void setItemSlot(EquipmentSlot const*, not_null_ptr<ItemInstance>);
    virtual void isOnFire();
    virtual void isPassenger();
    virtual void isVehicle();
    virtual void isSneaking();
    virtual void setSneaking(bool);
    virtual void isIdle();
    virtual void setIsIdle(bool);
    virtual void isSprinting();
    virtual void setSprinting(bool);
    virtual void isGlowing();
    virtual void setGlowing(bool);
    virtual void isInvisible();
    virtual void isInvisibleTo(std::shared_ptr<Player>);
    virtual void getTeam();
    virtual void isAlliedTo(std::shared_ptr<Entity>);
    virtual void isAlliedTo(Team*);
    virtual void setInvisible(bool);
    virtual void ShouldRenderShadow();
    virtual void canFly();
    virtual void thunderHit(LightningBolt const*);
    virtual void killed(std::shared_ptr<LivingEntity>);
    virtual void checkInBlock(double, double, double);
    virtual void spawnEatParticles(ItemInstance const&, int);
    virtual void makeStuckInWeb();
    virtual void getName();
    virtual void isInvulnerableTo(DamageSource*);
    virtual void isInvulnerable();
    virtual void setInvulnerable(bool);
    virtual void getSubEntities();
    virtual void is(std::shared_ptr<Entity>);
    virtual void getYHeadRot();
    virtual void setYHeadRot(float);
    virtual void setYBodyRot(float);
    virtual void isAttackable();
    virtual void skipAttackInteraction(std::shared_ptr<Entity>);
    virtual void copyPosition(std::shared_ptr<Entity>);
    virtual void changeDimension(int);
    virtual void canChangeDimensions();
    virtual void getBlockExplosionResistance(Explosion*, Level*, BlockPos const&);
    virtual void shouldBlockExplode(Explosion*, Level*, BlockPos const&, float);
    virtual void getMaxFallDistance();
    virtual void getPortalEntranceBlock();
    virtual void getPortalEntranceOffset();
    virtual void getPortalEntranceForwards();
    virtual void isIgnoringBlockTriggers();
    virtual void displayFireAnimation();
    virtual void setUUID(std::wstring const&);
    virtual void getUUID();
    virtual void getStringUUID();
    virtual void isPushedByWater();
    virtual void getViewScale();
    virtual void setViewScale(double);
    virtual std::wstring getDisplayName();
    virtual void setCustomName(std::wstring const&, std::wstring const&, bool);
    virtual void getCustomName();
    virtual void hasCustomName();
    virtual void setCustomNameVisible(bool);
    virtual void isCustomNameVisible();
    virtual void teleportTo(double, double, double);
    virtual void shouldShowName();
    virtual void onSyncedDataUpdated(EntityDataAccessor_Base const*);
    virtual Direction* getDirection();
    virtual void getMotionDirection();
    virtual void broadcastToPlayer(std::shared_ptr<ServerPlayer>);
    virtual void getBoundingBox();
    virtual void getBoundingBoxForCulling();
    virtual void setBoundingBox(AABB*);
    virtual void getEyeHeight();
    virtual void setSlot(int, not_null_ptr<ItemInstance> const&);
    virtual void interactAt(std::shared_ptr<Player> const&, Vec3*, InteractionHand::EInteractionHand);
    virtual void ignoreExplosion();
    virtual void startSeenByPlayer(std::shared_ptr<ServerPlayer>);
    virtual void stopSeenByPlayer(std::shared_ptr<ServerPlayer>);
    virtual void rotate(Rotation*);
    virtual void mirror(Mirror*);
    virtual void onlyOpCanSetNbt();
    virtual void checkAndResetTeleportedFlag();
    virtual void getControllingPassenger();
    virtual void getPassengers();
    virtual void hasPassenger(std::shared_ptr<Entity>);
    virtual void hasPassenger(eINSTANCEOF);
    virtual void fillIndirectPassengers(eINSTANCEOF, std::set<std::shared_ptr<Entity>>*);
    virtual void getIndirectPassengers(eINSTANCEOF);
    virtual void getIndirectPassengers();
    virtual void getRootVehicle();
    virtual void isPassengerOfSameVehicle(std::shared_ptr<Entity>);
    virtual void hasIndirectPassenger(std::shared_ptr<Entity>);
    virtual void hasIndirectPassenger(eINSTANCEOF);
    virtual void isControlledByLocalInstance();
    virtual void getVehicle();
    virtual void getPistonPushReaction();
    virtual void getSoundSource();
    virtual bool isCreative();
    virtual void isDespawnProtected();
    virtual void setDespawnProtected();
    virtual void couldWander();
    virtual void canCreateParticles();
    virtual void stopCurrentLerp();
    virtual void PositionLocked_4();
    virtual void SetPositionLocked_4(bool);
    virtual void TakeGlideCollisionDamage_4();
    virtual void SetGlideCollisionDamage_4(bool);
    virtual void GetLiftForceModifier_4();
    virtual void SetLiftForceModifier_4(double);
    virtual void onLoadedFromSave_4();
    virtual void isUsingItemFlag_4();
    virtual void setUsingItemFlag_4(bool);
    virtual void getFireImmuneTicks();

    Vec3 getPos(float);
    bool isType(int);
};
