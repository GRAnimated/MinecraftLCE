#pragma once

#include "net/minecraft/core/NonNullList.h"
#include "net/minecraft/network/syncher/SynchedEntityData.h"
#include "net/minecraft/sounds/SoundSource.h"
#include "net/minecraft/world/ArrayWithLength.h"
#include "net/minecraft/world/InteractionHand.h"
#include "net/minecraft/world/eINSTANCEOF.h"
#include "net/minecraft/world/entity/CommandSender.h"
#include <cstdint>
#include <map>
#include <memory>
#include <set>
#include <unordered_map>

#include "net/minecraft/world/entity/SkinAdjustments.h"
#include "types.h"

enum MoverType { SELF, PLAYER, PISTON, SHULKER_BOX, SHULKER };
class Block;
class BlockPos;
class BlockState;
class SoundEvent;
class Material;
class Level;
class DamageSource;
class Player;
class Item;
class CompoundTag;
class ItemInstance;
class Direction;
class LightningBolt;
class Team;
class EntityTooltipDataHolder;
class EquipmentSlot;
class AABB;
class Rotation;
class LivingEntity;
class Explosion;
class ServerPlayer;
class Mirror;
class EntityDataAccessor_Base;
class Vec3;
class Random;
class SynchedEntityData;

class Entity : public std::enable_shared_from_this<Entity>, public CommandSender {
public:
    static EntityDataAccessor<int>* qword_7101789FA0;
    static EntityDataAccessor<int>* qword_7101789FA8;
    static EntityDataAccessor<std::wstring>* qword_7101789FB0;
    static EntityDataAccessor<bool>* qword_7101789FB8;
    static EntityDataAccessor<bool>* qword_7101789FC0;
    static EntityDataAccessor<bool>* qword_7101789FC8;
    static EntityDataAccessor<std::wstring>* qword_7101789FE0;
    static EntityDataAccessor<bool>* qword_7101789FD8;
    static EntityDataAccessor<bool>* qword_7101789FD0;

    static int sEntityAmount;
    static int sTlsIndex;
    static double sViewScale;

    static void staticCtor();
    static int getSmallId();

    Entity(Level*, bool);
    void _init(bool, Level*);

    void sendMessage(ClientboundChatPacket::EChatPacketMessage, int*, uint, std::wstring*, uint) override;
    bool hasPermission(EGameCommand) override;
    std::wstring getNetworkName() override;
    BlockPos getCommandSenderBlockPosition() override;
    Vec3 getCommandSenderWorldPosition() override;
    Level* getCommandSenderWorld() override;
    void getCommandSenderEntity() override;
    bool isSendMessageEnabled() override;
    void setCommandStats(CommandStats::CommandStatType, int) override;
    void getServer() override;
    virtual ~Entity();
    virtual eINSTANCEOF GetType() = 0;
    virtual void fjDerivedCtorCalls();
    virtual void kill();
    virtual void defineSynchedData() = 0;
    virtual void resetPos();
    virtual void remove();
    virtual void setDropContainerContent(bool);
    virtual void setSize(float, float);
    virtual void setPos(double, double, double);
    virtual void tick();
    virtual void baseTick();
    virtual void processDimensionDelay();
    virtual int getPortalWaitTime();
    virtual void setSecondsOnFire(int);
    virtual void clearFire();
    virtual void outOfWorld();
    virtual void move(MoverType, double, double, double, bool);
    virtual void updateDeltaAfterMove(Block*, double, double, double, double&, double&, double&);
    virtual void setLocationFromBoundingbox();
    virtual void getSwimSound();
    virtual void getSwimSplashSound();
    virtual void checkInsideBlocks();
    virtual void onInsideBlock(const BlockState*);
    virtual void playStepSound(const BlockPos&, Block*);
    virtual float playFlySound(float);
    virtual bool makeFlySound();
    virtual void playSound(const SoundEvent*, float, float);
    virtual bool isSilent();
    virtual void setSilent(bool);
    virtual bool isNoGravity();
    virtual void setNoGravity(bool);
    virtual bool makeStepSound();
    virtual void checkFallDamage(double, bool, Block*, const BlockPos&);
    virtual AABB* getCollideBox();
    virtual void burn(int);
    virtual void causeFallDamage(float, float);
    virtual bool isInWater();
    virtual bool isOverWater();
    virtual void updateInWaterState();
    virtual void doWaterSplashEffect();
    virtual void updateSprintingState();
    virtual void doSprintParticleEffect();
    virtual bool isUnderLiquid(Material*);
    virtual void getLightColor();
    virtual void getBrightness();
    virtual void setLevel(Level*);
    virtual void moveTo(double, double, double, float, float);
    virtual void playerTouch(std::shared_ptr<Player>);
    virtual void push(std::shared_ptr<Entity>);
    virtual void push(double, double, double);
    virtual void markHurt();
    virtual void hurt(DamageSource*, float);
    virtual Vec3* getViewVector(float);
    virtual bool isPickable();
    virtual bool isPushable();
    virtual void awardKillScore(std::shared_ptr<Entity>, int, DamageSource*);
    virtual void shouldRender(double, double, double);
    virtual void shouldRender(double);
    virtual void shouldRenderAtSqrDistance(double);
    virtual void save(CompoundTag*);
    virtual void load(CompoundTag*);
    virtual void repositionEntityAfterLoad();
    virtual void readAdditionalSaveData(CompoundTag*) = 0;
    virtual void addAdditonalSaveData(CompoundTag*) = 0;
    virtual void readAdditionContructionTag(CompoundTag*);
    virtual void getAdditionContructionTag();
    virtual void spawnAtLocation(Item*, int);
    virtual void spawnAtLocation(Item*, int, float);
    virtual void spawnAtLocation(not_null_ptr<ItemInstance>, float);
    virtual bool isAlive();
    virtual bool isInWall();
    virtual void interact(const std::shared_ptr<Player>&, InteractionHand::EInteractionHand);
    virtual void getCollideAgainstBox(std::shared_ptr<Entity>);
    virtual void rideTick();
    virtual void positionRider(const std::shared_ptr<Entity>&);
    virtual void onPassengerTurned(std::shared_ptr<Entity>);
    virtual void getRidingHeight();
    virtual void getRideHeight();
    virtual void startRiding(std::shared_ptr<Entity>);
    virtual void startRiding(std::shared_ptr<Entity>, bool);
    virtual void GetInteractTooltip(const EntityTooltipDataHolder&);
    virtual void GetHitTooltip(const EntityTooltipDataHolder&);
    virtual void HideUseTooltips();
    virtual void canRide(std::shared_ptr<Entity>);
    virtual void ejectPassengers();
    virtual void stopRiding();
    virtual void stopRidingBeforeTeleport();
    virtual void addPassenger(std::shared_ptr<Entity>);
    virtual void removePassenger(std::shared_ptr<Entity>);
    virtual void canAddPassenger(std::shared_ptr<Entity>);
    virtual void lerpTo(double, double, double, float, float, int, bool);
    virtual void getPickRadius();
    virtual Vec3* getLookAngle();
    virtual void getRotationVector();
    virtual void getForward();
    virtual void handleInsidePortal(const BlockPos&);
    virtual void getDimensionChangingDelay();
    virtual void lerpMotion(double, double, double);
    virtual void handleEntityEvent(unsigned char, int);
    virtual void animateHurt();
    virtual void getHandSlots();
    virtual void getArmorSlots();
    virtual void getAllSlots();
    virtual void setItemSlot(const EquipmentSlot*, not_null_ptr<ItemInstance>);
    virtual bool isOnFire();
    virtual bool isPassenger();
    virtual bool isVehicle();
    virtual bool isSneaking();
    virtual void setSneaking(bool);
    virtual bool isIdle();
    virtual void setIsIdle(bool);
    virtual bool isSprinting();
    virtual void setSprinting(bool);
    virtual bool isGlowing();
    virtual void setGlowing(bool);
    virtual bool isInvisible();
    virtual bool isInvisibleTo(std::shared_ptr<Player>);
    virtual void getTeam();
    virtual bool isAlliedTo(std::shared_ptr<Entity>);
    virtual bool isAlliedTo(Team*);
    virtual void setInvisible(bool);
    virtual void ShouldRenderShadow();
    virtual void canFly();
    virtual void thunderHit(const LightningBolt*);
    virtual void killed(std::shared_ptr<LivingEntity>);
    virtual void checkInBlock(double, double, double);
    virtual void spawnEatParticles(const ItemInstance&, int);
    virtual void makeStuckInWeb();
    virtual std::wstring getName();
    virtual bool isInvulnerableTo(DamageSource*);
    virtual bool isInvulnerable();
    virtual void setInvulnerable(bool);
    virtual void getSubEntities();
    virtual bool is(std::shared_ptr<Entity>);
    virtual void getYHeadRot();
    virtual void setYHeadRot(float);
    virtual void setYBodyRot(float);
    virtual bool isAttackable();
    virtual void skipAttackInteraction(std::shared_ptr<Entity>);
    virtual void copyPosition(std::shared_ptr<Entity>);
    virtual void changeDimension(int);
    virtual void canChangeDimensions();
    virtual void getBlockExplosionResistance(Explosion*, Level*, const BlockPos&);
    virtual void shouldBlockExplode(Explosion*, Level*, const BlockPos&, float);
    virtual void getMaxFallDistance();
    virtual void getPortalEntranceBlock();
    virtual void getPortalEntranceOffset();
    virtual void getPortalEntranceForwards();
    virtual bool isIgnoringBlockTriggers();
    virtual void displayFireAnimation();
    virtual void setUUID(const std::wstring&);
    virtual void getUUID();
    virtual void getStringUUID();
    virtual bool isPushedByWater();
    virtual void getViewScale();
    virtual void setViewScale(double);
    virtual std::wstring getDisplayName();
    virtual void setCustomName(const std::wstring&, const std::wstring&, bool);
    virtual void getCustomName();
    virtual void hasCustomName();
    virtual void setCustomNameVisible(bool);
    virtual bool isCustomNameVisible();
    virtual void teleportTo(double, double, double);
    virtual void shouldShowName();
    virtual void onSyncedDataUpdated(const EntityDataAccessor_Base*);
    virtual Direction* getDirection();
    virtual void getMotionDirection();
    virtual void broadcastToPlayer(std::shared_ptr<ServerPlayer>);
    virtual const AABB* getBoundingBox();
    virtual void getBoundingBoxForCulling();
    virtual void setBoundingBox(AABB*);
    virtual float getEyeHeight();
    virtual void setSlot(int, const not_null_ptr<ItemInstance>&);
    virtual void interactAt(const std::shared_ptr<Player>&, Vec3*, InteractionHand::EInteractionHand);
    virtual void ignoreExplosion();
    virtual void startSeenByPlayer(std::shared_ptr<ServerPlayer>);
    virtual void stopSeenByPlayer(std::shared_ptr<ServerPlayer>);
    virtual void rotate(Rotation*);
    virtual void mirror(Mirror*);
    virtual void onlyOpCanSetNbt();
    virtual void checkAndResetTeleportedFlag();
    virtual void getControllingPassenger();
    virtual void getPassengers();
    virtual void hasPassenger(std::shared_ptr<Entity>);
    virtual void hasPassenger(eINSTANCEOF);
    virtual void fillIndirectPassengers(eINSTANCEOF, std::set<std::shared_ptr<Entity>>*);
    virtual void getIndirectPassengers(eINSTANCEOF);
    virtual void getIndirectPassengers();
    virtual void getRootVehicle();
    virtual bool isPassengerOfSameVehicle(std::shared_ptr<Entity>);
    virtual void hasIndirectPassenger(std::shared_ptr<Entity>);
    virtual void hasIndirectPassenger(eINSTANCEOF);
    virtual bool isControlledByLocalInstance();
    virtual void getVehicle();
    virtual void getPistonPushReaction();
    virtual SoundSource::ESoundSource getSoundSource();
    virtual bool isCreative();
    virtual bool isDespawnProtected();
    virtual void setDespawnProtected();
    virtual void couldWander();
    virtual void canCreateParticles();
    virtual void stopCurrentLerp();
    virtual bool PositionLocked();
    virtual void SetPositionLocked(bool);
    virtual void TakeGlideCollisionDamage();
    virtual void SetGlideCollisionDamage(bool);
    virtual double GetLiftForceModifier();
    virtual void SetLiftForceModifier(double);
    virtual void onLoadedFromSave();
    virtual bool isUsingItemFlag();
    virtual void setUsingItemFlag(bool);
    virtual int getFireImmuneTicks();

    static void fjDebugCheckSmallIdLeaks();

    Vec3 getPos(float);
    bool isType(eINSTANCEOF);
    void setSharedFlag(int, bool);
    Vec3* calculateViewVector(float, float);
    int getId();
    void setId(int id);
    bool isInLava();
    void moveRelative(float, float, float, float);
    bool isFree(double, double, double);
    void fjCheckDerivedConstruction();

    int mId;
    bool mBlocksBuilding;
    std::vector<Entity> mPassengers;
    int mBoardingCooldown;
    std::shared_ptr<Entity> mVehicle;
    bool mForcedLoading;
    Level* mLevel;
    double mXo;
    double mYo;
    double mZo;
    double mX;
    double mY;
    double mZ;
    double mDeltaMovementX;
    double mDeltaMovementY;
    double mDeltaMovementZ;
    float mYRot;
    float mXRot;
    float mYRotO;
    float mXRotO;
    AABB* mBoundingBox;
    bool mOnGround;
    bool mHasHorizontalCollision;
    bool mHasVerticalCollision;
    bool mHasCollision;
    bool mIsHurtMarked;
    int mRemainingFireTicks;
    bool field_cc;
    int field_d0;
    int field_d4;
    int field_d8;
    int field_dc;
    int field_e0;
    int field_e4;
    int field_e8;
    bool mIsInWeb;
    bool mOutsideWorldBorder;
    bool mCipa;
    bool mIsRemoved;
    float mWidth;
    float mHeight;
    float mWalkDistO;
    float mWalkDist;
    float mMoveDist;
    float mFallDistance;
    short mFallTicks;
    short mHardLandingsCount;
    int mNextStep;
    float mNextFlap;
    double mXOld;
    double mYOld;
    double mZOld;
    float mMaxUpStep;
    bool mHasNoPhysics;
    int mPushThrough;
    Random* mRand;
    int mTickCount;
    bool mWasInWater;
    int mInvulnerableTime;
    bool mIsFirstTick;
    bool mIsImmuneToFire;
    std::shared_ptr<SynchedEntityData> mEntityData;
    bool mIsInChunk;
    int mXChunk;
    int mYChunk;
    int mZChunk;
    long mXP;
    long mYP;
    long mZP;
    void* field_190;
    bool mHasNoCulling;
    bool mHasImpulse;
    int mChangingDimensionDelay;
    bool mIsInsidePortal;
    int mPortalTime;
    int mDimensionId;
    BlockPos mPortalEntranceBlock;
    Vec3* mPortalEntranceOffset;
    Direction* mPortalEntranceForwards;
    std::wstring mStringUUID;
    std::wstring mCustomName;
    CommandStats* mCommandStats;
    NonNullList<not_null_ptr<ItemInstance>> mInventory;
    bool mIsGlowing;
    bool mIsInvulnerable;
    bool mHasTeleported;
    std::set<std::wstring> mTags;
    void* field_240;
    arrayWithLength<double> mPistonDeltas;
    long mPistonDeltasGameTime;
    int mType;
    _SkinAdjustments mSkinAdjustments;
};

ASSERT_SIZEOF(Entity, 0x2B8)
